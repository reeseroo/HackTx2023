def active_screen(display, clock):
    #to-do
    print("todo")
    
    # import flashcard module 

from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.screenmanager import Screen, ScreenManager
from kivy.uix.boxlayout import BoxLayout


class FlashcardApp(App):
    def build(self):
        self.flashcards = [
            {"question": "What is your name?", "answer": "Your face"},
            {"question": "Who wrote 'Romeo and Juliet'?", "answer": "No one cares"},
            {"question": "What is 7 x 8?", "answer": "21"},
            # Add more flashcards here
        ]

        self.current_flashcard = 0
        self.layout = BoxLayout(orientation="vertical")
        self.setup_ui()
        return self.layout 
    
    def setup_ui(self):
        self.question_label = Label(text=self.flashcards[self.current_flashcard]["question"])
        self.show_answer_button = Button(text="Show Answer")
        self.show_answer_button.bind(on_release=self.show_answer)
        self.answer_label = Label(text="", color=(1, 0, 0, 1))  # Red text for answer, initially hidden
        self.next_button = Button(text="Next Flashcard")
        self.next_button.bind(on_release=self.show_next_flashcard)

        self.layout.add_widget(self.question_label)
        self.layout.add_widget(self.show_answer_button)
        self.layout.add_widget(self.answer_label)
        self.layout.add_widget(self.next_button)

        return self.layout

    def show_answer(self, instance):
        self.answer_label.text = self.flashcards[self.current_flashcard]["answer"]

    def show_next_flashcard(self, instance):
        self.current_flashcard += 1
        if self.current_flashcard < len(self.flashcards):
            self.question_label.text = self.flashcards[self.current_flashcard]["question"]
            self.answer_label.text = ""
        else:
            self.question_label.text = "No more flashcards"

if __name__ == '__main__':
    FlashcardApp().run()


class ActiveScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.setup_ui()
        
    def setup_ui(self):
        # Add a label to explain how to use the "Active Mode"
        explanation_label = Label(text="Prepare to quiz yourself on your knowledge using flashcards, either AI generated or by your own choice!")

        # Add a button to navigate back to the home screen without saving
        back_button = Button(text="Back to Home (Without Saving)")
        back_button.bind(on_release=self.go_to_home_without_saving)
        
        # Add a button to save work and then go back to the home screen
        save_button = Button(text="Save and Go Back to Home")
        save_button.bind(on_release=self.save_and_go_to_home)

        # Add these widgets to the screen
        self.add_widget(explanation_label)
        self.add_widget(back_button)
        self.add_widget(save_button)


    def go_to_home(self, instance):
        # You can define the action to switch to the home screen here
        self.manager.current = 'home'  # 'home' is the name of your home screen


class YourApp(App):
    def build(self):
        # Create a screen manager and add the ActiveScreen to it
        screen_manager = ScreenManager()
        screen_manager.add_widget(ActiveScreen(name='active'))
        
        return screen_manager


if __name__ == '__main__':
    YourApp().run()

# explanation on how to use active mode 
#flashcards -- either generated by ChatGPT as an option or you filled in the flashcards yourself in passive 
# and then imported it 

# If your "Active Mode" requires external services like ChatGPT, ensure that you have the 
# necessary integration in place. You might need to make API calls to fetch data or interact with the service.


#navigation back to home screen
#save button for unfinished work 

#after quiz finishes, go back to home with updated numbers and "congratulations"
# that appears after a small translation 


# if computer can understand what they mean by the response -- technical --
